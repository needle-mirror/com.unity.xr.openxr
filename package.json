{
  "name": "com.unity.xr.openxr",
  "displayName": "OpenXR Plugin",
  "version": "1.15.0-pre.1",
  "unity": "2021.3",
  "description": "OpenXR is an open, royalty-free standard developed by Khronos that aims to simplify AR/VR development by allowing developers to target a wide range of AR/VR devices. Use this plug-in to enable OpenXR in XR Plug-in Management.",
  "keywords": [
    "openxr",
    "xr",
    "reality",
    "xreditorsubsystem"
  ],
  "dependencies": {
    "com.unity.xr.management": "4.4.0",
    "com.unity.xr.legacyinputhelpers": "2.1.2",
    "com.unity.inputsystem": "1.6.3",
    "com.unity.xr.core-utils": "2.3.0"
  },
  "samples": [
    {
      "displayName": "Controller",
      "description": "Basic sample showing how to create and reference OpenXR action maps with the new input system.",
      "path": "Samples~/Controller"
    },
    {
      "displayName": "Controller XRInput",
      "description": "Basic sample showing how to query OpenXR input with the XR Input APIs.",
      "path": "Samples~/ControllerXRInput"
    },
    {
      "displayName": "Meshing Subsystem Feature",
      "description": "Shows a teapot mesh generated from native mesh subsystem with physics baked in background.",
      "path": "Samples~/MeshingFeature"
    },
    {
      "displayName": "Intercept Feature",
      "description": "Demonstrates how to intercept an OpenXR method.",
      "path": "Samples~/InterceptFeature"
    },
    {
      "displayName": "Custom Composition Layer Feature",
      "description": "Demonstrates how to add support for a custom composition layer type.",
      "path": "Samples~/CustomCompositionLayerFeature"
    }
  ],
  "_upm": {
    "changelog": "### Added\n\n* Added `OpenXREditorSettings.VulkanOffscreenSwapchainNoMainDisplay` property to request at startup to use offscreen rendering for devices that require it. The setting can be enabled through the Project settings UI and build code. This setting should be disabled for handheld platforms.\n* Added Meta Quest input profile features when switching to Meta Quest Build Profile.\n* Added `Use OpenXR Predicted Time` UI setting to enable OpenXR time prediction which allows the hardware and runtime to set the display time prediction for the next frame instead of Unity.\n* Added a new OpenXRSetting, [LatencyOptimization](xref:project-configuration#latency-optimization) to allow developers to opt to prioritize rendering latency or input polling latency.\n* Added optional project validation check for Link Time Optimization with Meta Quest.\n* Added `UnityXRDisplay::DestroyTexture` API so providers can access them to destroy textures created by `UnityXRDisplay::CreateTexture` API.\n* Added a validation rule for setting Latency Optimization to Prioritize Input Polling with Meta Quest Support enabled.\n\n### Changed\n\n* Recompiled the native Android plug-in with support for [16 KB page sizes](https://developer.android.com/guide/practices/page-sizes) on Android 15 or newer.\n\n### Fixed\n\n* Fixed offscreen rendering flags to be added only when the \"Offscreen Rendering Only (Vulkan)\" Android OpenXR UI setting is enabled. [IN-78279](https://unity3d.atlassian.net/servicedesk/customer/portal/2/IN-78279).\n* Fixed Meshing and Intercept features not being enabled by default when the sample was imported.\n* Fixed OpenXRCustomLayerHandler class so it now explicitiy calls acquire and release on swapchains for every layer on the main thread and caches swapchain image render textures for efficiency.\n* Fixed an issue where `OpenXRInput.TryGetInputSourceName` failed to retrieve the input source name."
  },
  "upmCi": {
    "footprint": "ee4ee2737590197f3c174781b65ad00212fc3890"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.15/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/xr.sdk.openxr.git",
    "type": "git",
    "revision": "2ea46496a7b1f743b9e7bc01e06dc4602086d50d"
  }
}
